OS LAB Group-11

1) Datastructures used in the code:

// struct Action
struct Action
{
    int user_id;
    int action_id;
    int action_type;
    time_t time_stamp;
    int priority;
};

// class describing a node in the graph
class Node
{
public:

    int id;
    int action_cnt[3];
    int order;                                        // 0 for priority and 1 for chronological
    queue<Action> wq;                                 // wall queue for user
    priority_queue<Action, vector<Action>, cmp1> fq1; // feed queue for user
    priority_queue<Action, vector<Action>, cmp2> fq2; // feed queue for user
    
    // constructor for the Node class
    Node()
    {
        this->order = rand() % 2;
        this->action_cnt[0] = 0;
        this->action_cnt[1] = 0;
        this->action_cnt[2] = 0;
        fq1 = priority_queue<Action, vector<Action>, cmp1>();
        fq2 = priority_queue<Action, vector<Action>, cmp2>();
    }
};


2) rationalizing design decision for queue sizes

We have used the default queue and deque, provided under the standard library of C++ (bits/stdc++.h).
They are implemented using the doubly linked list, which is a dynamic data structure, and hence we do not need to worry about the size of the queue.
This is the reason why we have not used any other data structure for the queue and dequeue.



3) the design of how locks are used to ensure no race condition and concurrency

Locks are implemented in the following conditions to handle race-condition and handle concurrency:
locks on shared_queue in userSim, when pushing into the global queue.
locks while implementing the wait-condition in pushUpdate, where we are monitoring the queue for any new action
locks in the main thread, where we are pushing the actions into the global queue, and also while pushing into the user queue.
locks while adding actions to the wallQueue of the user.
locks while adding actions to the feedQueue of the neighbours of the user.

// lock function for mutex (handles errors)
void LOCK(pthread_mutex_t mutex)
{
    int status = pthread_mutex_lock(&mutex);
    if (status != 0)
    {
        printf(COLOR_RED "pthread_mutex_lock failed: %s\n" COLOR_RESET, strerror(status));
        exit(1);
    }
}

void UNLOCK(pthread_mutex_t mutex)
{
    int status = pthread_mutex_unlock(&mutex);
    if (status != 0)
    {
        printf(COLOR_RED "UNLOCK failed: %s\n" COLOR_RESET, strerror(status));
        exit(1);
    }
}